// Generated by gencpp from file alpheus_msgs/pressurePID.msg
// DO NOT EDIT!


#ifndef ALPHEUS_MSGS_MESSAGE_PRESSUREPID_H
#define ALPHEUS_MSGS_MESSAGE_PRESSUREPID_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace alpheus_msgs
{
template <class ContainerAllocator>
struct pressurePID_
{
  typedef pressurePID_<ContainerAllocator> Type;

  pressurePID_()
    : pKp(0.0)
    , pKi(0.0)
    , pKd(0.0)  {
    }
  pressurePID_(const ContainerAllocator& _alloc)
    : pKp(0.0)
    , pKi(0.0)
    , pKd(0.0)  {
  (void)_alloc;
    }



   typedef float _pKp_type;
  _pKp_type pKp;

   typedef float _pKi_type;
  _pKi_type pKi;

   typedef float _pKd_type;
  _pKd_type pKd;




  typedef boost::shared_ptr< ::alpheus_msgs::pressurePID_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::alpheus_msgs::pressurePID_<ContainerAllocator> const> ConstPtr;

}; // struct pressurePID_

typedef ::alpheus_msgs::pressurePID_<std::allocator<void> > pressurePID;

typedef boost::shared_ptr< ::alpheus_msgs::pressurePID > pressurePIDPtr;
typedef boost::shared_ptr< ::alpheus_msgs::pressurePID const> pressurePIDConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::alpheus_msgs::pressurePID_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::alpheus_msgs::pressurePID_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace alpheus_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'alpheus_msgs': ['/home/pushkalkatara/Desktop/PUbuntu/AUV/alpheus/src/alpheus_msgs/msg', '/home/pushkalkatara/Desktop/PUbuntu/AUV/alpheus/src/alpheus_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::alpheus_msgs::pressurePID_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::alpheus_msgs::pressurePID_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::alpheus_msgs::pressurePID_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::alpheus_msgs::pressurePID_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::alpheus_msgs::pressurePID_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::alpheus_msgs::pressurePID_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::alpheus_msgs::pressurePID_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b607b6b53844bf703ffc3df5d628e627";
  }

  static const char* value(const ::alpheus_msgs::pressurePID_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb607b6b53844bf70ULL;
  static const uint64_t static_value2 = 0x3ffc3df5d628e627ULL;
};

template<class ContainerAllocator>
struct DataType< ::alpheus_msgs::pressurePID_<ContainerAllocator> >
{
  static const char* value()
  {
    return "alpheus_msgs/pressurePID";
  }

  static const char* value(const ::alpheus_msgs::pressurePID_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::alpheus_msgs::pressurePID_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 pKp\n\
float32 pKi\n\
float32 pKd\n\
";
  }

  static const char* value(const ::alpheus_msgs::pressurePID_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::alpheus_msgs::pressurePID_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pKp);
      stream.next(m.pKi);
      stream.next(m.pKd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pressurePID_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::alpheus_msgs::pressurePID_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::alpheus_msgs::pressurePID_<ContainerAllocator>& v)
  {
    s << indent << "pKp: ";
    Printer<float>::stream(s, indent + "  ", v.pKp);
    s << indent << "pKi: ";
    Printer<float>::stream(s, indent + "  ", v.pKi);
    s << indent << "pKd: ";
    Printer<float>::stream(s, indent + "  ", v.pKd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ALPHEUS_MSGS_MESSAGE_PRESSUREPID_H
