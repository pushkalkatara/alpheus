// Generated by gencpp from file alpheus_msgs/thruster.msg
// DO NOT EDIT!


#ifndef ALPHEUS_MSGS_MESSAGE_THRUSTER_H
#define ALPHEUS_MSGS_MESSAGE_THRUSTER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace alpheus_msgs
{
template <class ContainerAllocator>
struct thruster_
{
  typedef thruster_<ContainerAllocator> Type;

  thruster_()
    : speedfwd1(0)
    , speedfwd2(0)
    , speedup1(0)
    , speedup2(0)
    , speedup3(0)
    , speedup4(0)
    , speeddir1(0)
    , speeddir2(0)  {
    }
  thruster_(const ContainerAllocator& _alloc)
    : speedfwd1(0)
    , speedfwd2(0)
    , speedup1(0)
    , speedup2(0)
    , speedup3(0)
    , speedup4(0)
    , speeddir1(0)
    , speeddir2(0)  {
  (void)_alloc;
    }



   typedef uint16_t _speedfwd1_type;
  _speedfwd1_type speedfwd1;

   typedef uint16_t _speedfwd2_type;
  _speedfwd2_type speedfwd2;

   typedef uint16_t _speedup1_type;
  _speedup1_type speedup1;

   typedef uint16_t _speedup2_type;
  _speedup2_type speedup2;

   typedef uint16_t _speedup3_type;
  _speedup3_type speedup3;

   typedef uint16_t _speedup4_type;
  _speedup4_type speedup4;

   typedef uint16_t _speeddir1_type;
  _speeddir1_type speeddir1;

   typedef uint16_t _speeddir2_type;
  _speeddir2_type speeddir2;




  typedef boost::shared_ptr< ::alpheus_msgs::thruster_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::alpheus_msgs::thruster_<ContainerAllocator> const> ConstPtr;

}; // struct thruster_

typedef ::alpheus_msgs::thruster_<std::allocator<void> > thruster;

typedef boost::shared_ptr< ::alpheus_msgs::thruster > thrusterPtr;
typedef boost::shared_ptr< ::alpheus_msgs::thruster const> thrusterConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::alpheus_msgs::thruster_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::alpheus_msgs::thruster_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace alpheus_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'alpheus_msgs': ['/home/pushkalkatara/Desktop/PUbuntu/AUV/alpheus/src/alpheus_msgs/msg', '/home/pushkalkatara/Desktop/PUbuntu/AUV/alpheus/src/alpheus_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::alpheus_msgs::thruster_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::alpheus_msgs::thruster_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::alpheus_msgs::thruster_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::alpheus_msgs::thruster_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::alpheus_msgs::thruster_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::alpheus_msgs::thruster_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::alpheus_msgs::thruster_<ContainerAllocator> >
{
  static const char* value()
  {
    return "016d61562410ee3b17201a66aa29be18";
  }

  static const char* value(const ::alpheus_msgs::thruster_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x016d61562410ee3bULL;
  static const uint64_t static_value2 = 0x17201a66aa29be18ULL;
};

template<class ContainerAllocator>
struct DataType< ::alpheus_msgs::thruster_<ContainerAllocator> >
{
  static const char* value()
  {
    return "alpheus_msgs/thruster";
  }

  static const char* value(const ::alpheus_msgs::thruster_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::alpheus_msgs::thruster_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 speedfwd1\n\
uint16 speedfwd2\n\
uint16 speedup1\n\
uint16 speedup2\n\
uint16 speedup3\n\
uint16 speedup4\n\
uint16 speeddir1\n\
uint16 speeddir2\n\
";
  }

  static const char* value(const ::alpheus_msgs::thruster_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::alpheus_msgs::thruster_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speedfwd1);
      stream.next(m.speedfwd2);
      stream.next(m.speedup1);
      stream.next(m.speedup2);
      stream.next(m.speedup3);
      stream.next(m.speedup4);
      stream.next(m.speeddir1);
      stream.next(m.speeddir2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct thruster_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::alpheus_msgs::thruster_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::alpheus_msgs::thruster_<ContainerAllocator>& v)
  {
    s << indent << "speedfwd1: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.speedfwd1);
    s << indent << "speedfwd2: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.speedfwd2);
    s << indent << "speedup1: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.speedup1);
    s << indent << "speedup2: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.speedup2);
    s << indent << "speedup3: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.speedup3);
    s << indent << "speedup4: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.speedup4);
    s << indent << "speeddir1: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.speeddir1);
    s << indent << "speeddir2: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.speeddir2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ALPHEUS_MSGS_MESSAGE_THRUSTER_H
